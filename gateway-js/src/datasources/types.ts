import {
    GraphQLRequest as GraphQLRequest1,
    GraphQLResponse as GraphQLResponse1,
    GraphQLRequestContext as GraphQLRequestContext1,
    GraphQLRequestContextExecutionDidStart as GraphQLRequestContextExecutionDidStart1
} from 'apollo-server-types';
import {
    GraphQLRequest as GraphQLRequest3,
    GraphQLResponse as GraphQLResponse3,
    GraphQLRequestContext as GraphQLRequestContext3,
    GraphQLRequestContextExecutionDidStart as GraphQLRequestContextExecutionDidStart3
} from 'apollo-server-types-3';

export type GraphQLRequest = GraphQLRequest1 | GraphQLRequest3;
export type GraphQLResponse = GraphQLResponse1 | GraphQLResponse3;
export type GraphQLRequestContext<TContext> = GraphQLRequestContext1<TContext> | GraphQLRequestContext3<TContext>;
export type GraphQLRequestContextExecutionDidStart<TContext> =
    GraphQLRequestContextExecutionDidStart1<TContext>
    | GraphQLRequestContextExecutionDidStart3<TContext>;

export interface GraphQLDataSource<
  TContext extends Record<string, any> = Record<string, any>,
> {
  process(
    options: GraphQLDataSourceProcessOptions<TContext>,
  ): Promise<GraphQLResponse>;
}

export enum GraphQLDataSourceRequestKind {
  INCOMING_OPERATION = 'incoming operation',
  HEALTH_CHECK = 'health check',
  LOADING_SCHEMA = 'loading schema',
}

export type GraphQLDataSourceProcessOptions<
  TContext extends Record<string, any> = Record<string, any>,
> = {

  /**
   * The request to send to the subgraph.
   *
   * For backwards compatibility with Apollo Server 2, the type of Request can come from
   * both versions of the apollo-server-types.
   */
  request: GraphQLRequest
} & (
  {
      kind: GraphQLDataSourceRequestKind.INCOMING_OPERATION;
      /**
       * The GraphQLRequestContext for the operation received by the gateway, or
       * one of the strings if this operation is generated by the gateway without an
       * incoming request.
       *
       * For backwards compatibility with Apollo Server 2, `overallCachePolicy` needs
       * to be treated as optional.
       */
      incomingRequestContext: GraphQLRequestContext<TContext>
      /**
       * Equivalent to incomingRequestContext.context (provided here for
       * backwards compatibility): the object created by the Apollo Server
       * `context` function.
       *
       * @deprecated Use `incomingRequestContext.context` instead (after
       * checking `kind`).
       */
      context: GraphQLRequestContext<TContext>['context'];
    }
  | {
      kind:
        | GraphQLDataSourceRequestKind.HEALTH_CHECK
        | GraphQLDataSourceRequestKind.LOADING_SCHEMA;
      /**
       * Mostly provided for historical reasons.
       */
      context: {};
    }
);
