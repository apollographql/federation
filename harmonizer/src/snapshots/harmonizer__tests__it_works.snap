---
source: harmonizer/src/lib.rs
expression: "harmonize(vec![SubgraphDefinition ::\n               new(\"users\", \"undefined\",\n                   \"\n            type User @key(fields: \\\"id\\\") {\n              id: ID\n              name: String\n            }\n\n            type Query {\n              users: [User!]\n            }\n          \"),\n               SubgraphDefinition ::\n               new(\"movies\", \"undefined\",\n                   \"\n            type Movie {\n              title: String\n              name: String\n            }\n\n            type User @key(fields: \\\"id\\\") {\n              id: ID\n              favorites: [Movie!]\n            }\n\n            type Query {\n              movies: [Movie!]\n            }\n          \")]).unwrap().supergraph_sdl"

---
schema
  @core(feature: "https://specs.apollo.dev/core/v0.2")
  @core(feature: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @core(feature: String!, as: String, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

enum core__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

scalar join__FieldSet

enum join__Graph {
  MOVIES @join__graph(name: "movies", url: "undefined")
  USERS @join__graph(name: "users", url: "undefined")
}

type Movie
  @join__type(graph: MOVIES)
{
  title: String
  name: String
}

type Query
  @join__type(graph: MOVIES)
  @join__type(graph: USERS)
{
  movies: [Movie!] @join__field(graph: MOVIES)
  users: [User!] @join__field(graph: USERS)
}

type User
  @join__type(graph: MOVIES, key: "id")
  @join__type(graph: USERS, key: "id")
{
  id: ID
  favorites: [Movie!] @join__field(graph: MOVIES)
  name: String @join__field(graph: USERS)
}
